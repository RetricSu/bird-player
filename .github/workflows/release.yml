name: Release

on:
  push:
    tags:
      - "v*"

permissions: # Define the permissions for the GITHUB_TOKEN
  contents: write
  actions: write
  deployments: write
  pages: write

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-latest
            TARGET: aarch64-apple-darwin
            BUNDLE: true
            EXTENSION: .dmg

          - os: macos-latest
            TARGET: x86_64-apple-darwin
            BUNDLE: true
            EXTENSION: .dmg

          - os: ubuntu-latest
            TARGET: x86_64-unknown-linux-musl
            BUNDLE: false

          - os: windows-latest
            TARGET: x86_64-pc-windows-msvc
            BUNDLE: true
            EXTENSION: .zip

    runs-on: ${{ matrix.os }}
    steps:
      - name: Building ${{ matrix.TARGET }}
        run: echo "${{ matrix.TARGET }}"

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install musl-gcc if needed
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools musl-dev pkg-config

      - name: Install system dependencies
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libglib2.0-dev libasound2-dev libpulse-dev

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.TARGET }}
          override: true

      - name: Install cargo-bundle if needed
        if: ${{ matrix.BUNDLE == true }}
        run: cargo install cargo-bundle

      # Windows specific tools installation
      - name: Install Windows tools
        if: ${{ matrix.os == 'windows-latest' }}
        run: |
          # Commenting out the cargo-wix install since it's causing issues
          # cargo install cargo-wix

      - name: Cargo bundle
        if: ${{ matrix.BUNDLE == true && matrix.os != 'ubuntu-latest' && matrix.os != 'windows-latest' }}
        run: cargo bundle --release --target=${{ matrix.TARGET }}
        env:
          CARGO_TERM_COLOR: always

      - name: Cargo build (Windows)
        if: ${{ matrix.os == 'windows-latest' }}
        run: cargo build --release --target=${{ matrix.TARGET }}
        env:
          CARGO_TERM_COLOR: always

      - name: Cargo bundle (Linux with PulseAudio)
        if: ${{ matrix.BUNDLE == true && matrix.os == 'ubuntu-latest' }}
        run: cargo bundle --release --target=${{ matrix.TARGET }} --features pulseaudio
        env:
          CARGO_TERM_COLOR: always

      - name: Cargo build (non-Linux)
        if: ${{ matrix.BUNDLE == false && matrix.os != 'ubuntu-latest' && matrix.os != 'windows-latest' }}
        run: cargo build --release --target=${{ matrix.TARGET }}
        env:
          CARGO_TERM_COLOR: always

      - name: Cargo build (Linux with musl)
        if: ${{ matrix.BUNDLE == false && matrix.os == 'ubuntu-latest' }}
        run: |
          # Configure pkg-config for cross-compilation
          echo '#!/bin/sh
          export PKG_CONFIG_ALLOW_CROSS=1
          export PKG_CONFIG_PATH=/usr/lib/pkgconfig:/usr/share/pkgconfig:/usr/lib/x86_64-linux-gnu/pkgconfig
          exec pkg-config "$@"
          ' | sudo tee /usr/local/bin/musl-pkg-config
          sudo chmod +x /usr/local/bin/musl-pkg-config
          
          # Create output directory for the binary
          mkdir -p target/${{ matrix.TARGET }}/release
          
          # Build with cross-compilation friendly settings
          # Explicitly disable features that require system libraries that are hard to cross-compile
          PKG_CONFIG=/usr/local/bin/musl-pkg-config \
          PKG_CONFIG_ALLOW_CROSS=1 \
          PKG_CONFIG_PATH=/usr/lib/pkgconfig:/usr/share/pkgconfig:/usr/lib/x86_64-linux-gnu/pkgconfig \
          cargo build --release --target=${{ matrix.TARGET }} --no-default-features
        env:
          CARGO_TERM_COLOR: always
          RUSTFLAGS: "-C target-feature=+crt-static"
          
      # Create Linux package
      - name: Create Linux Package
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          # Create a simple README file with instructions for users
          mkdir -p linux-package
          echo "=== IMPORTANT - HOW TO OPEN THE APP ===" > linux-package/README.txt
          echo "" >> linux-package/README.txt
          echo "This application is a static binary compiled with musl." >> linux-package/README.txt
          echo "To run it:" >> linux-package/README.txt
          echo "1. Extract all files" >> linux-package/README.txt
          echo "2. Make the binary executable: chmod +x bird-player" >> linux-package/README.txt
          echo "3. Run it: ./bird-player" >> linux-package/README.txt
          
          # Copy the binary and assets
          cp target/${{ matrix.TARGET }}/release/bird-player linux-package/
          mkdir -p linux-package/assets
          cp -r assets/* linux-package/assets/
          
          # Create a tar.gz archive
          tar -czvf Bird-Player-${{ matrix.TARGET }}.tar.gz -C linux-package .

      # macOS code signing and notarization
      - name: Create macOS DMG
        if: ${{ matrix.os == 'macos-latest' }}
        run: |
          brew install create-dmg
          
          # Perform ad-hoc signing to make app more compatible with Gatekeeper
          # This won't provide the same security as a real developer certificate
          # but will help with the "app is damaged" errors
          echo "Attempting to sign the app bundle..."
          if ! codesign --deep --force --sign - --options runtime --preserve-metadata=entitlements,requirements,flags "target/${{ matrix.TARGET }}/release/bundle/osx/Bird Player.app"; then
            echo "Primary signing method failed, trying alternate approach..."
            # Try an alternate approach - sign each framework individually first
            find "target/${{ matrix.TARGET }}/release/bundle/osx/Bird Player.app/Contents/Frameworks" -type d -name "*.framework" -exec codesign --force --sign - {} \;
            # Then sign the main bundle
            codesign --force --sign - "target/${{ matrix.TARGET }}/release/bundle/osx/Bird Player.app" || true
          fi
          echo "Proceeding with DMG creation regardless of signing result"
          
          # Create a simple README file with instructions for users
          cat > target/${{ matrix.TARGET }}/release/bundle/osx/README.txt << 'EOL'
          === IMPORTANT - HOW TO OPEN THE APP ===
          
          Since this app is not signed with an Apple Developer certificate, macOS security (Gatekeeper) may prevent it from opening.
          
          Method 1: If right-click > Open doesn't work:
          1. Open System Preferences > Security & Privacy
          2. Look for a message about "Bird Player was blocked" and click "Open Anyway"
          
          Method 2: Using Terminal:
          1. Open Terminal 
          2. Run this command: xattr -dr com.apple.quarantine "/Volumes/Bird Player/Bird Player.app"
          3. Then try opening the app
          
          You only need to do this the first time you open the app.
          EOL
          
          # Create the DMG with both the app and README
          create-dmg \
            --volname "Bird Player" \
            --window-pos 200 120 \
            --window-size 800 400 \
            --icon "Bird Player.app" 200 190 \
            --text-size 12 \
            --icon "README.txt" 500 190 \
            --no-internet-enable \
            "Bird-Player-${{ matrix.TARGET }}.dmg" \
            "target/${{ matrix.TARGET }}/release/bundle/osx/"

      # Remove Apple notarization steps that require paid accounts
      
      # Windows packaging - simple zip instead of installer
      - name: Create Windows Package
        if: ${{ matrix.os == 'windows-latest' }}
        shell: pwsh
        run: |
          # Create a simple README file with instructions for users
          Set-Content -Path "target\${{ matrix.TARGET }}\release\README.txt" -Value "=== IMPORTANT - HOW TO OPEN THE APP ==="
          Add-Content -Path "target\${{ matrix.TARGET }}\release\README.txt" -Value ""
          Add-Content -Path "target\${{ matrix.TARGET }}\release\README.txt" -Value "This app is designed to be run as a normal Windows application."
          Add-Content -Path "target\${{ matrix.TARGET }}\release\README.txt" -Value "1. Extract all contents to a folder"
          Add-Content -Path "target\${{ matrix.TARGET }}\release\README.txt" -Value "2. Double-click bird-player.exe to run"
          Add-Content -Path "target\${{ matrix.TARGET }}\release\README.txt" -Value ""
          Add-Content -Path "target\${{ matrix.TARGET }}\release\README.txt" -Value "If you get SmartScreen warnings:"
          Add-Content -Path "target\${{ matrix.TARGET }}\release\README.txt" -Value "- Click 'More info'"
          Add-Content -Path "target\${{ matrix.TARGET }}\release\README.txt" -Value "- Click 'Run anyway'"
          
          # Ensure assets directory exists in release folder
          $assetsDir = "target\${{ matrix.TARGET }}\release\assets"
          if (-Not (Test-Path $assetsDir)) {
            New-Item -Path $assetsDir -ItemType Directory -Force
          }
          
          # Copy assets folder if it exists
          if (Test-Path -Path "assets") {
            Copy-Item -Path "assets\*" -Destination $assetsDir -Recurse -Force
            Write-Host "Assets copied successfully."
          } else {
            Write-Host "Warning: Assets directory not found. Created an empty assets directory."
          }
          
          # Create the ZIP file with all necessary components
          $items = @(
            "target\${{ matrix.TARGET }}\release\bird-player.exe",
            "target\${{ matrix.TARGET }}\release\README.txt",
            "target\${{ matrix.TARGET }}\release\assets"
          )
          Compress-Archive -Path $items -DestinationPath "Bird-Player-${{ matrix.TARGET }}.zip" -Force
          Write-Host "ZIP file created successfully."

      - uses: actions/upload-artifact@master
        with:
          name: Bird-Player-${{ matrix.TARGET }}${{ matrix.EXTENSION || '.tar.gz' }}
          path: ./Bird-Player-${{ matrix.TARGET }}${{ matrix.EXTENSION || '.tar.gz' }}

      - uses: svenstaro/upload-release-action@v2
        name: Upload binaries to release
        if: ${{ github.event_name == 'push' }}
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: Bird-Player-${{ matrix.TARGET }}${{ matrix.EXTENSION || '.tar.gz' }}
          asset_name: Bird-Player-${{ matrix.TARGET }}${{ matrix.EXTENSION || '.tar.gz' }}
          tag: ${{ github.ref }}
          prerelease: ${{ !startsWith(github.ref, 'refs/tags/') }}
          overwrite: true
